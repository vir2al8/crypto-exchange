openapi: 3.0.4
info:
  title: Crypto exchange
  description: This is a project that allows customers to trade cryptocurrencies or digital currencies for other assets, such as conventional fiat money or other digital currencies
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:7101/api/v1
tags:
  - name: order
    description: Ордер на покупку или продажу валюты
paths:
  /order/create:
    post:
      tags:
        - order
      summary: Create order
      operationId: orderCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
  /order/read:
    post:
      tags:
        - order
      summary: Read order
      operationId: orderRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderReadResponse'
  /order/delete:
    post:
      tags:
        - order
      summary: Delete order
      operationId: orderDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDeleteResponse'
  /order/search:
    post:
      tags:
        - order
      summary: Search order
      operationId: orderSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSearchResponse'

components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/OrderCreateRequest'
          read: '#/components/schemas/OrderReadRequest'
          delete: '#/components/schemas/OrderDeleteRequest'
          search: '#/components/schemas/OrderSearchRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/OrderCreateResponse'
          read: '#/components/schemas/OrderReadResponse'
          delete: '#/components/schemas/OrderDeleteResponse'
          search: '#/components/schemas/OrderSearchResponse'
          init: '#/components/schemas/OrderInitResponse'

    OrderId:
      type: string
      description: Идентификатор ордера

    BaseOrder:
      type: object
      description: Объект описывает свойства для create
      properties:
        walletId:
          $ref: './wallet-v1.yml/#/components/schemas/WalletId'
        amount:
          type: number
          description: Количество валюты
        type:
          $ref: '#/components/schemas/OrderType'
        operation:
          $ref: '#/components/schemas/OrderOperation'

    OrderStatus:
      type: string
      description: 'Статус ордера: открыт или закрыт'
      enum:
        - open
        - closed

    OrderType:
      type: string
      description: 'Тип ордера: рыночный или лимитный'
      enum:
        - market
        - limit

    OrderOperation:
      type: string
      description: 'Операция ордера: покупка или продажа'
      enum:
        - buying
        - selling

    OrderInitResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'

    OrderCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrder'

    OrderCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderCreateObject'

    OrderReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'

    OrderReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderReadObject'

    OrderDeleteObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'

    OrderDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderDeleteObject'

    OrderSearchFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        operation:
          $ref: '#/components/schemas/OrderOperation'
        type:
          $ref: '#/components/schemas/OrderType'

    OrderSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            orderFilter:
              $ref: '#/components/schemas/OrderSearchFilter'

    OrderResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/OrderId'
            status:
              $ref: '#/components/schemas/OrderStatus'
            createdAt:
              type: string
            updatedAt:
              type: string

    OrderResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом
          properties:
            order:
              $ref: '#/components/schemas/OrderResponseObject'

    OrderResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/OrderResponseObject'

    OrderCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseMulti'

    # STUBS ======================
    OrderRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    OrderRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/OrderDebug'

    OrderDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/OrderRequestDebugMode'
        stub:
          $ref: '#/components/schemas/OrderRequestDebugStubs'

    OrderRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badType
        - badStatus
        - badWalletId
        - cannotDelete